import React, { useState, useEffect, useRef } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { EventInput } from '@fullcalendar/core';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';\nimport { api } from '../../services/api';\nimport { useAuth } from '../../context/AuthContext';\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  start: string;\n  end?: string;\n  extendedProps: {\n    type: 'task' | 'exam' | 'class' | 'meeting' | 'study' | 'other';\n    description?: string;\n    course_name?: string;\n    priority: 'low' | 'medium' | 'high';\n    status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled';\n  };\n  backgroundColor?: string;\n  borderColor?: string;\n}\n\ninterface NewEventForm {\n  title: string;\n  description: string;\n  start: string;\n  end: string;\n  type: 'task' | 'exam' | 'class' | 'meeting' | 'study' | 'other';\n  priority: 'low' | 'medium' | 'high';\n}\n\nconst CalendarPage: React.FC = () => {\n  const { user } = useAuth();\n  const [events, setEvents] = useState<CalendarEvent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showEventModal, setShowEventModal] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState<CalendarEvent | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<string>('');\n  const [newEvent, setNewEvent] = useState<NewEventForm>({\n    title: '',\n    description: '',\n    start: '',\n    end: '',\n    type: 'study',\n    priority: 'medium'\n  });\n  const calendarRef = useRef<FullCalendar>(null);\n\n  useEffect(() => {\n    loadEvents();\n  }, []);\n\n  const loadEvents = async () => {\n    try {\n      const response = await api.get('/schedules');\n      if (response.data.success) {\n        const calendarEvents = response.data.data.map((event: any) => ({\n          id: event.id.toString(),\n          title: event.title,\n          start: event.start_time,\n          end: event.end_time,\n          extendedProps: {\n            type: event.activity_type,\n            description: event.description,\n            course_name: event.course_name,\n            priority: event.priority,\n            status: event.status\n          },\n          backgroundColor: getEventColor(event.activity_type, event.priority),\n          borderColor: getEventBorderColor(event.priority)\n        }));\n        setEvents(calendarEvents);\n      }\n    } catch (error) {\n      console.error('Error cargando eventos:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getEventColor = (type: string, priority: string) => {\n    const colors = {\n      task: { low: '#e3f2fd', medium: '#2196f3', high: '#1976d2' },\n      exam: { low: '#fff3e0', medium: '#ff9800', high: '#f57c00' },\n      class: { low: '#e8f5e8', medium: '#4caf50', high: '#388e3c' },\n      meeting: { low: '#f3e5f5', medium: '#9c27b0', high: '#7b1fa2' },\n      study: { low: '#fff8e1', medium: '#ffc107', high: '#ffa000' },\n      other: { low: '#f5f5f5', medium: '#9e9e9e', high: '#616161' }\n    };\n    return colors[type as keyof typeof colors]?.[priority as keyof typeof colors.task] || '#9e9e9e';\n  };\n\n  const getEventBorderColor = (priority: string) => {\n    const colors = {\n      low: '#e0e0e0',\n      medium: '#757575',\n      high: '#424242'\n    };\n    return colors[priority as keyof typeof colors] || '#757575';\n  };\n\n  const handleDateClick = (info: any) => {\n    setSelectedDate(info.dateStr);\n    setNewEvent({ \n      ...newEvent, \n      start: info.dateStr + 'T09:00',\n      end: info.dateStr + 'T10:00'\n    });\n    setShowCreateModal(true);\n  };\n\n  const handleEventClick = (info: any) => {\n    const event = events.find(e => e.id === info.event.id);\n    if (event) {\n      setSelectedEvent(event);\n      setShowEventModal(true);\n    }\n  };\n\n  const handleCreateEvent = async () => {\n    try {\n      const response = await api.post('/schedules', {\n        title: newEvent.title,\n        description: newEvent.description,\n        activity_type: newEvent.type,\n        start_time: newEvent.start,\n        end_time: newEvent.end,\n        priority: newEvent.priority\n      });\n\n      if (response.data.success) {\n        setShowCreateModal(false);\n        setNewEvent({\n          title: '',\n          description: '',\n          start: '',\n          end: '',\n          type: 'study',\n          priority: 'medium'\n        });\n        loadEvents();\n      }\n    } catch (error) {\n      console.error('Error creando evento:', error);\n    }\n  };\n\n  const handleDeleteEvent = async (eventId: string) => {\n    try {\n      const response = await api.delete(`/schedules/${eventId}`);\n      if (response.data.success) {\n        setShowEventModal(false);\n        setSelectedEvent(null);\n        loadEvents();\n      }\n    } catch (error) {\n      console.error('Error eliminando evento:', error);\n    }\n  };\n\n  const handleUpdateEventStatus = async (eventId: string, newStatus: string) => {\n    try {\n      const response = await api.patch(`/schedules/${eventId}/status`, {\n        status: newStatus\n      });\n      if (response.data.success) {\n        loadEvents();\n      }\n    } catch (error) {\n      console.error('Error actualizando evento:', error);\n    }\n  };\n\n  const getUpcomingEvents = () => {\n    const now = new Date();\n    const upcoming = events\n      .filter(event => new Date(event.start) > now)\n      .sort((a, b) => new Date(a.start).getTime() - new Date(b.start).getTime())\n      .slice(0, 5);\n    return upcoming;\n  };\n\n  const getTodayEvents = () => {\n    const today = new Date().toISOString().split('T')[0];\n    return events.filter(event => event.start.split('T')[0] === today);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Cronograma Inteligente</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Gestiona tus talleres, clases y actividades académicas\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n        {/* Sidebar con resumen */}\n        <div className=\"lg:col-span-1\">\n          {/* Eventos de hoy */}\n          <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Hoy</h2>\n            <div className=\"space-y-3\">\n              {getTodayEvents().length > 0 ? (\n                getTodayEvents().map(event => (\n                  <div key={event.id} className=\"p-3 rounded-lg border-l-4\" \n                       style={{ borderLeftColor: event.backgroundColor }}>\n                    <p className=\"font-medium text-sm\">{event.title}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(event.start).toLocaleTimeString('es', { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </p>\n                    {event.extendedProps.course_name && (\n                      <p className=\"text-xs text-blue-600\">\n                        {event.extendedProps.course_name}\n                      </p>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-gray-500 text-sm\">No hay eventos para hoy</p>\n              )}\n            </div>\n          </div>\n\n          {/* Próximos eventos */}\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Próximos Eventos</h2>\n            <div className=\"space-y-3\">\n              {getUpcomingEvents().map(event => (\n                <div key={event.id} className=\"p-3 rounded-lg border-l-4\"\n                     style={{ borderLeftColor: event.backgroundColor }}>\n                  <p className=\"font-medium text-sm\">{event.title}</p>\n                  <p className=\"text-xs text-gray-500\">\n                    {new Date(event.start).toLocaleDateString('es', {\n                      month: 'short',\n                      day: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}\n                  </p>\n                  {event.extendedProps.course_name && (\n                    <p className=\"text-xs text-blue-600\">\n                      {event.extendedProps.course_name}\n                    </p>\n                  )}\n                  <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium\n                    ${\n                      event.extendedProps.priority === 'high' ? 'bg-red-100 text-red-800' :\n                      event.extendedProps.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-green-100 text-green-800'\n                    }`}>\n                    {event.extendedProps.priority === 'high' ? 'Alta' :\n                     event.extendedProps.priority === 'medium' ? 'Media' : 'Baja'}\n                  </span>\n                </div>\n              ))}\n              {getUpcomingEvents().length === 0 && (\n                <p className=\"text-gray-500 text-sm\">No hay eventos próximos</p>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Calendario principal */}\n        <div className=\"lg:col-span-3\">\n          <div className=\"bg-white rounded-lg shadow-md p-6\">\n            <div className=\"flex justify-between items-center mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <button\n                  onClick={() => calendarRef.current?.getApi().prev()}\n                  className=\"p-2 hover:bg-gray-100 rounded-lg\"\n                >\n                  <ChevronLeftIcon className=\"h-5 w-5\" />\n                </button>\n                <button\n                  onClick={() => calendarRef.current?.getApi().next()}\n                  className=\"p-2 hover:bg-gray-100 rounded-lg\"\n                >\n                  <ChevronRightIcon className=\"h-5 w-5\" />\n                </button>\n                <button\n                  onClick={() => calendarRef.current?.getApi().today()}\n                  className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700\"\n                >\n                  Hoy\n                </button>\n              </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <div className=\"w-3 h-3 bg-blue-500 rounded\"></div>\n                  <span>Talleres</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <div className=\"w-3 h-3 bg-orange-500 rounded\"></div>\n                  <span>Evaluaciones</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\n                  <span>Clases</span>\n                </div>\n                <div className=\"flex items-center space-x-2 text-sm\">\n                  <div className=\"w-3 h-3 bg-purple-500 rounded\"></div>\n                  <span>Reuniones</span>\n                </div>\n              </div>\n            </div>\n            \n            <FullCalendar\n              ref={calendarRef}\n              plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n              initialView=\"dayGridMonth\"\n              headerToolbar={false}\n              events={events}\n              dateClick={handleDateClick}\n              eventClick={handleEventClick}\n              selectable={true}\n              selectMirror={true}\n              dayMaxEvents={true}\n              weekends={true}\n              height={600}\n              locale=\"es\"\n              dayHeaderFormat={{ weekday: 'short' }}\n              eventTimeFormat={{\n                hour: '2-digit',\n                minute: '2-digit',\n                hour12: false\n              }}\n              slotLabelFormat={{\n                hour: '2-digit',\n                minute: '2-digit',\n                hour12: false\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Modal para ver evento */}\n      {showEventModal && selectedEvent && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n          <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div className=\"mt-3\">\n              <div className=\"flex justify-between items-start\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n                  {selectedEvent.title}\n                </h3>\n                <button\n                  onClick={() => setShowEventModal(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Cerrar</span>\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-700\">Tipo:</p>\n                  <p className=\"text-sm text-gray-900 capitalize\">{selectedEvent.extendedProps.type}</p>\n                </div>\n                \n                <div>\n                  <p className=\"text-sm font-medium text-gray-700\">Fecha y hora:</p>\n                  <p className=\"text-sm text-gray-900\">\n                    {new Date(selectedEvent.start).toLocaleString('es')}\n                  </p>\n                </div>\n                \n                {selectedEvent.extendedProps.description && (\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-700\">Descripción:</p>\n                    <p className=\"text-sm text-gray-900\">{selectedEvent.extendedProps.description}</p>\n                  </div>\n                )}\n                \n                {selectedEvent.extendedProps.course_name && (\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-700\">Curso:</p>\n                    <p className=\"text-sm text-blue-600\">{selectedEvent.extendedProps.course_name}</p>\n                  </div>\n                )}\n                \n                <div>\n                  <p className=\"text-sm font-medium text-gray-700\">Prioridad:</p>\n                  <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium\n                    ${\n                      selectedEvent.extendedProps.priority === 'high' ? 'bg-red-100 text-red-800' :\n                      selectedEvent.extendedProps.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-green-100 text-green-800'\n                    }`}>\n                    {selectedEvent.extendedProps.priority === 'high' ? 'Alta' :\n                     selectedEvent.extendedProps.priority === 'medium' ? 'Media' : 'Baja'}\n                  </span>\n                </div>\n                \n                <div>\n                  <p className=\"text-sm font-medium text-gray-700\">Estado:</p>\n                  <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium\n                    ${\n                      selectedEvent.extendedProps.status === 'completed' ? 'bg-green-100 text-green-800' :\n                      selectedEvent.extendedProps.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :\n                      selectedEvent.extendedProps.status === 'cancelled' ? 'bg-red-100 text-red-800' :\n                      'bg-gray-100 text-gray-800'\n                    }`}>\n                    {selectedEvent.extendedProps.status === 'completed' ? 'Completado' :\n                     selectedEvent.extendedProps.status === 'in_progress' ? 'En progreso' :\n                     selectedEvent.extendedProps.status === 'cancelled' ? 'Cancelado' : 'Programado'}\n                  </span>\n                </div>\n              </div>\n              \n              {selectedEvent.extendedProps.status !== 'completed' && (\n                <div className=\"mt-6 flex justify-between\">\n                  <div className=\"flex space-x-2\">\n                    {selectedEvent.extendedProps.status === 'scheduled' && (\n                      <button\n                        onClick={() => handleUpdateEventStatus(selectedEvent.id, 'in_progress')}\n                        className=\"px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700\"\n                      >\n                        Iniciar\n                      </button>\n                    )}\n                    {selectedEvent.extendedProps.status === 'in_progress' && (\n                      <button\n                        onClick={() => handleUpdateEventStatus(selectedEvent.id, 'completed')}\n                        className=\"px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700\"\n                      >\n                        Completar\n                      </button>\n                    )}\n                  </div>\n                  \n                  {user?.role === 'student' && selectedEvent.extendedProps.type === 'study' && (\n                    <button\n                      onClick={() => handleDeleteEvent(selectedEvent.id)}\n                      className=\"px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700\"\n                    >\n                      Eliminar\n                    </button>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Modal para crear evento */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n          <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div className=\"mt-3\">\n              <div className=\"flex justify-between items-start\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n                  Crear Nuevo Evento\n                </h3>\n                <button\n                  onClick={() => setShowCreateModal(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  <span className=\"sr-only\">Cerrar</span>\n                  <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Título</label>\n                  <input\n                    type=\"text\"\n                    value={newEvent.title}\n                    onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\"\n                    placeholder=\"Nombre del evento\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700\">Descripción</label>\n                  <textarea\n                    value={newEvent.description}\n                    onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n                    className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\"\n                    rows={3}\n                    placeholder=\"Descripción del evento\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Inicio</label>\n                    <input\n                      type=\"datetime-local\"\n                      value={newEvent.start}\n                      onChange={(e) => setNewEvent({ ...newEvent, start: e.target.value })}\n                      className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Fin</label>\n                    <input\n                      type=\"datetime-local\"\n                      value={newEvent.end}\n                      onChange={(e) => setNewEvent({ ...newEvent, end: e.target.value })}\n                      className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Tipo</label>\n                    <select\n                      value={newEvent.type}\n                      onChange={(e) => setNewEvent({ ...newEvent, type: e.target.value as any })}\n                      className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\"\n                    >\n                      <option value=\"study\">Estudio</option>\n                      <option value=\"task\">Taller</option>\n                      <option value=\"exam\">Evaluación</option>\n                      <option value=\"class\">Clase</option>\n                      <option value=\"meeting\">Reunión</option>\n                      <option value=\"other\">Otro</option>\n                    </select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Prioridad</label>\n                    <select\n                      value={newEvent.priority}\n                      onChange={(e) => setNewEvent({ ...newEvent, priority: e.target.value as any })}\n                      className=\"mt-1 block w-full border border-gray-300 rounded-md px-3 py-2\"\n                    >\n                      <option value=\"low\">Baja</option>\n                      <option value=\"medium\">Media</option>\n                      <option value=\"high\">Alta</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 flex justify-end space-x-3\">\n                <button\n                  onClick={() => setShowCreateModal(false)}\n                  className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400\"\n                >\n                  Cancelar\n                </button>\n                <button\n                  onClick={handleCreateEvent}\n                  className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700\"\n                  disabled={!newEvent.title || !newEvent.start || !newEvent.end}\n                >\n                  Crear Evento\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CalendarPage;
